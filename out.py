def lengthOfLongestSubstring(self, s: str,group=lambda depth, iterable:next(filter(lambda x:x is not None and not(type(x) == tuple and len(x) == 2 and x[0] == ... and type(x[1]) == int and x[1] > depth), iterable), None),none=lambda x:None) -> int:
	return group(0,[none(sol:=0),group(1,(group(1,[none(i:=num),none(used:=[]),none(count:=0),group(2,((..., 2) if s[i] in used else group(2,[none(count:=count + 1),(..., 2)]) if i == len(s) - 1 else group(2,[none(used.append(s[i])),none(count:=count + 1),none(i:=i + 1)]) for _ in iter(int, 1))),none(sol:=max(sol, count))]) for num in range(len(s)))),sol])